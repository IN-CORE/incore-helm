# Default values for incore.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# what level is the server, this is used to read some config files
level: prod

replicaCount: 1

image:
  project: hub.ncsa.illinois.edu/incore
  pullPolicy: IfNotPresent
  pullSecrets:
    - name: regcred

imagePullSecrets:
  - name: regcred
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# this will check for services if cors is allowed
cors:
  origin: []
  methods: GET,POST,DELETE
  headers: authorization

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: incore.exmple.com
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
  # should we add middleare annotations for traefik v2?
  traefik: false

# used by both data and hazard services
persistence:
  size: 10Gi
  #existingClaim: someclaim

# quotas for incore. there are 3 top level groups:
# - users, quotas for individual users
# - groups, quotas per group, weight is used to order
# - default quotas
# each quota will have:
# - disk max total disk quota for user
# - service [number of objects, size] quota for each of the services
quota: |
  {
    "groups": {
       "incore_ncsa": {
         "weight": 1,
         "cpu": [ 1, 8 ],
         "mem": [ 2, 16 ],
         "disk": 100,
         "service": [ 200, 5 ]
       },
       "incore_coe": {
         "weight": 0,
         "cpu": [ 1, 4 ],
         "mem": [ 2, 8 ],
         "disk": 10,
         "service": [ 200, 5 ]
       }
     },
     "default": {
       "cpu": [ 1, 2 ],
       "mem": [ 2, 4 ],
       "disk": 4,
       "service": [ 100, 2 ]
     }
  }

# the following information is for embedding google analytics into IN-CORE sites
# it WILL NOT impact the operation of the site if this is NOT set up
# it is used to track usage of the site and to help improve the site
# to set up Google Analytics, you need to create a Google Analytics account
# and get the tracking id, which is a string that looks like "G-AB12CDEFGH"
# you can then set the GA_KEY to this value
google_analytics: "GA-1234"

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# ----------------------------------------------------------------------
# FRONTEND CONFIGURATION
# ----------------------------------------------------------------------
frontend:
  replicas: 1
  image:
    repository: frontend
    tag: 1.12.0
  service:
    type: ClusterIP
    port: 80
  ingress:
    annotations:
  persistence:
    size: 1Gi

# ----------------------------------------------------------------------
# AUTHENTICATION CONFIGURATION
# ----------------------------------------------------------------------
auth:
  replicas: 1
  realm: In-core
  audience: INCORE
  image:
    repository: incore-auth
    tag: 1.7.0
  service:
    type: ClusterIP
    port: 5000
  influxdb:
    url: "http://influxdb:8086/"
    org: "incore"
    location: "data/IP2LOCATION-LITE-DB5.BIN"
    token: ""
  persistence:
    size: 5Gi

# ----------------------------------------------------------------------
# INCORE DOCUMENTATION CONFIGURATION
# ----------------------------------------------------------------------
doc_incore:
  replicas: 1
  image:
    repository: doc/incore
    tag: 4.12.0
  service:
    type: ClusterIP
    port: 80

# ----------------------------------------------------------------------
# PYINCORE DOCUMENTATION CONFIGURATION
# ----------------------------------------------------------------------
doc_pyincore:
  replicas: 1
  image:
    repository: doc/pyincore
    tag: 1.19.0
  service:
    type: ClusterIP
    port: 80

# ----------------------------------------------------------------------
# PYINCORE_VIZ DOCUMENTATION CONFIGURATION
# ----------------------------------------------------------------------
doc_pyincore_viz:
  replicas: 1
  image:
    repository: doc/pyincore-viz
    tag: 1.10.1
  service:
    type: ClusterIP
    port: 80

# ----------------------------------------------------------------------
# PYINCORE_VIZ DOCUMENTATION CONFIGURATION
# ----------------------------------------------------------------------
doc_pyincore_data:
  replicas: 1
  image:
    repository: doc/pyincore-data
    tag: 0.6.3
  service:
    type: ClusterIP
    port: 80

# ----------------------------------------------------------------------
# API DOCUMENTATION CONFIGURATION
# ----------------------------------------------------------------------
doc_api:
  replicas: 1
  image:
    repository: doc/api
    tag: v4.12.0
  service:
    type: ClusterIP
    port: 80

# ----------------------------------------------------------------------
# DATA SERVICE CONFIGURATION
# ----------------------------------------------------------------------
svc_data:
  replicas: 4
  repo: /home/incore/data/
  image:
    repository: data-jetty
    tag: 1.26.1
  service:
    type: ClusterIP
    port: 8888
  ingress:
    annotations:
  geoserver:
    enabled: true
#      ingress.kubernetes.io/auth-url: /auth/
#      ingress.kubernetes.io/auth-response-headers: x-auth-userinfo, X-Auth-Userinfo
#      traefik.ingress.kubernetes.io/rate-limit: |
#        extractorfunc: client.ip
#        rateset:
#          api-rateset:
#            period: 1s
#            average: 10
#            burst: 20


# ----------------------------------------------------------------------
# DFR3 SERVICE CONFIGURATION
# ----------------------------------------------------------------------
svc_dfr3:
  replicas: 4
  image:
    repository: dfr3-jetty
    tag: 1.26.1
  service:
    type: ClusterIP
    port: 8888
  ingress:
    annotations:
#      ingress.kubernetes.io/auth-url: /auth/
#      ingress.kubernetes.io/auth-response-headers: x-auth-userinfo, X-Auth-Userinfo
#      traefik.ingress.kubernetes.io/rate-limit: |
#        extractorfunc: client.ip
#        rateset:
#          api-rateset:
#            period: 1s
#            average: 10
#            burst: 20

# ----------------------------------------------------------------------
# HAZARD SERVICE CONFIGURATION
# ----------------------------------------------------------------------
svc_hazard:
  replicas: 4
  image:
    repository: hazard-jetty
    tag: 1.26.1
  service:
    type: ClusterIP
    port: 8888
  ingress:
    annotations:
#      ingress.kubernetes.io/auth-url: /auth/
#      ingress.kubernetes.io/auth-response-headers: x-auth-userinfo, X-Auth-Userinfo
#      traefik.ingress.kubernetes.io/rate-limit: |
#        extractorfunc: client.ip
#        rateset:
#          api-rateset:
#            period: 1s
#            average: 10
#            burst: 20

# ----------------------------------------------------------------------
# SPACE SERVICE CONFIGURATION
# ----------------------------------------------------------------------
svc_space:
  replicas: 2
  image:
    repository: space-jetty
    tag: 1.26.1
  service:
    type: ClusterIP
    port: 8888
  ingress:
    annotations:
#      ingress.kubernetes.io/auth-url: /auth/
#      ingress.kubernetes.io/auth-response-headers: x-auth-userinfo, X-Auth-Userinfo
#      traefik.ingress.kubernetes.io/rate-limit: |
#        extractorfunc: client.ip
#        rateset:
#          api-rateset:
#            period: 1s
#            average: 10
#            burst: 20

# ----------------------------------------------------------------------
# SEMANTICS SERVICE CONFIGURATION
# ----------------------------------------------------------------------
svc_sema:
  replicas: 1
  image:
    repository: semantics-jetty
    tag: 1.26.1
  service:
    type: ClusterIP
    port: 8888
  ingress:
    annotations:
#      ingress.kubernetes.io/auth-url: /auth/
#      ingress.kubernetes.io/auth-response-headers: x-auth-userinfo, X-Auth-Userinfo
#      traefik.ingress.kubernetes.io/rate-limit: |
#        extractorfunc: client.ip
#        rateset:
#          api-rateset:
#            period: 1s
#            average: 10
#            burst: 20

# ----------------------------------------------------------------------
# MAESTRO SERVICE CONFIGURATION
# ----------------------------------------------------------------------
svc_maestro:
  password: password
  common:
    image:
      repository: maestro
      tag: 1.1.0
      pullPolicy: IfNotPresent
    service:
      type: ClusterIP
      port: 8000
  testbeds:
    slc:
      enabled: true
      env:
        host: incore-postgresql-hl
        port: 5432
        user: user
        password: password
        db_name: maestro_slc
        prefix: /maestro/slc
        workers: 2
      replicas: 1
    joplin:
      enabled: true
      env:
        host: incore-postgresql-hl
        port: 5432
        user: user
        password: password
        db_name: maestro_joplin
        prefix: /maestro/joplin
        workers: 2
      replicas: 1
    galveston:
      enabled: true
      env:
        host: incore-postgresql-hl
        port: 5432
        user: user
        password: password
        db_name: maestro_galveston
        prefix: /maestro/galveston
        workers: 2
      replicas: 1

# ----------------------------------------------------------------------
# PLOTTING SERVICE CONFIGURATION
# ----------------------------------------------------------------------
svc_plotting:
  replicas: 1
  image:
    repository: plotting
    tag: 1.11.0
  service:
    type: ClusterIP
    port: 5000
  ingress:
    annotations:
  persistence:
    enabled: true
    size: 5Gi

# ----------------------------------------------------------------------
# PLAYBOOK CONFIGURATION
# ----------------------------------------------------------------------
playbooks:
  slc:
    enabled: true
    image:
      repository: playbook/slc
      tag: 0.3.2
    replicas: 1
  joplin:
    enabled: true
    image:
      repository: playbook/joplin
      tag: 0.2.2
    replicas: 1
  galveston:
    enabled: true
    image:
      repository: playbook/galveston
      tag: 0.2.2
    replicas: 1

# ----------------------------------------------------------------------
# DATAWOLF CONFIGURATION
# ----------------------------------------------------------------------
datawolf:
  image:
    repository: hub.ncsa.illinois.edu/incore/datawolf
    tag: 1.14.0

  auth:
    enabled: false
    admins:
      - datawolf@incore.illinios.edu

  dataset: public

  loglevel: INFO

  engine:
    storelogs: true

  persistence:
    #existingClaim:
    #storageClass: "-"
    size: 10Gi

  postgresql:
    enabled: false
    url: jdbc:postgresql://postgresql/datawolf
    postgresqlUsername: datawolf
    postgresqlPassword: datawolf
    postgresqlDatabase: database

  ingress:
    enabled: false

# ----------------------------------------------------------------------
# Maestro usersync configuration
# ----------------------------------------------------------------------
maestro_usersync:
  image:
    repository: maestro-usersync
    tag: 1.0.0
  env:
    REALM: "In-core"
    SERVER_BASE_URL: "url"
    TOKEN_URL: "url"
    ADMIN_USERNAME: "username"
    ADMIN_PASSWORD: "password"
    SLC_GROUP_ID: "slc_id"
    JOPLIN_GROUP_ID: "joplin_id"
    GALVESTON_GROUP_ID: "galveston_id"
    NCSA_DEVELOPER_LIST: "developers"

# ----------------------------------------------------------------------
# DEPENDENCIES CONFIGURATION
# ----------------------------------------------------------------------

# ----------------------------------------------------------------------
# GEOSERVER CONFIGURATION
# ----------------------------------------------------------------------
# These are not the values for the geoserver delployment
# but rather the values for the incore services that depend on geoserver
geoserver:
  enabled : true
  username: admin
  password: password
  workspace: incore
  url: http://geoserver:8080/geoserver/

# ----------------------------------------------------------------------
# MONGODB
# ----------------------------------------------------------------------
mongodb:
  architecture: standalone
  useStatefulSet: true
  auth:
    rootPassword: incorerocks
  replicaSetName: incore
  initdbScripts:

# ----------------------------------------------------------------------
# POSTGRESQL
# ----------------------------------------------------------------------
postgresql:
  auth:
    postgresPassword: incorerocks
  primary:
    initdb:
      scripts:
        keycloak.sql: |
          CREATE DATABASE keycloak;
          CREATE USER keycloak WITH PASSWORD 'keycloak';
          GRANT ALL PRIVILEGES ON DATABASE keycloak TO keycloak;
        datawolf.sql: |
          CREATE DATABASE datawolf;
          CREATE USER datawolf WITH PASSWORD 'datawolf';
          GRANT ALL PRIVILEGES ON DATABASE datawolf TO datawolf;
        maestro.sql: |
          CREATE DATABASE maestro_galveston;
          CREATE DATABASE maestro_joplin;
          CREATE DATABASE maestro_slc;
          CREATE USER maestro WITH PASSWORD 'maestro';
          GRANT ALL PRIVILEGES ON DATABASE maestro_galveston TO maestro;
          GRANT ALL PRIVILEGES ON DATABASE maestro_joplin TO maestro;
          GRANT ALL PRIVILEGES ON DATABASE maestro_slc TO maestro;

# ----------------------------------------------------------------------
# KEYCLOAK
# ----------------------------------------------------------------------
keycloak:
  httpRelativePath: /auth/
  auth:
    adminUser: keycloak
    adminPassword: keycloakAdminPassword
  proxy: edge
  ingress:
    enabled: true
    tls: []
    servicePort: http
    hostname: incore.example.com
    rules:
      - host: incore.example.com
        http:
          paths:
            - path: /auth/
              pathType: ImplementationSpecific
  service:
    type: ClusterIP
  postgresql:
    enabled: false
  externalDatabase:
    host: incore-postgresql-hl # if the chart name is changed this needs to change as well
    user: keycloak  # if the chart name is changed this needs to change as well
    password: keycloak
    database: keycloak
    port: 5432
  initContainers: |
    - name: theme-provider
      image: incorencsa/keycloak-theme:1.2.0

      command: 
        - sh
      args:
        - -c
        - |
          echo "Copying theme..."
          cp -R /app/keycloak_theme/* /theme
      volumeMounts:
        - name: incore-theme
          mountPath: /theme
  extraVolumes: |
    - name: incore-theme
      emptyDir: {}
  extraVolumeMounts: |
    - name: incore-theme
      mountPath: /opt/bitnami/keycloak/themes/incore-theme
