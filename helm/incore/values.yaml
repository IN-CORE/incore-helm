# Default values for incore.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  project: hub.ncsa.illinois.edu/incore
  pullPolicy: IfNotPresent

imagePullSecrets:
  - name: regcred
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: incore.exmple.com
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# used by both data and hazard services
persistence:
  size: 10Gi
  #existingClaim: someclaim

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# ----------------------------------------------------------------------
# FRONTEND CONFIGURATION
# ----------------------------------------------------------------------
frontend:
  replicas: 1
  image:
    repository: frontend
    tag: d.8888
  service:
    type: ClusterIP
    port: 80
  ingress:
    annotations:
  persistence:
    size: 1Gi

# ----------------------------------------------------------------------
# FRONTEND CONFIGURATION
# ----------------------------------------------------------------------
whoami:
  replicas: 1
  ingress:
    annotations:
  #      traefik.ingress.kubernetes.io/rule-type: PathPrefixStrip
  service:
    type: ClusterIP
    port: 80

# ----------------------------------------------------------------------
# FRONTEND CONFIGURATION
# ----------------------------------------------------------------------
auth:
  replicas: 1
  realm: In-core
  audience: INCORE
  image:
    repository: incore-auth
    tag: radiant
  service:
    type: ClusterIP
    port: 5000

# ----------------------------------------------------------------------
# INCORE DOCUMENTATION CONFIGURATION
# ----------------------------------------------------------------------
doc_incore:
  replicas: 1
  image:
    repository: doc/incore
    tag: 1.7.0
  service:
    type: ClusterIP
    port: 80

# ----------------------------------------------------------------------
# PYINCORE DOCUMENTATION CONFIGURATION
# ----------------------------------------------------------------------
doc_pyincore:
  replicas: 1
  image:
    repository: doc/pyincore
    tag: 0.8.1
  service:
    type: ClusterIP
    port: 80

# ----------------------------------------------------------------------
# PYINCORE_VIZ DOCUMENTATION CONFIGURATION
# ----------------------------------------------------------------------
doc_pyincore_viz:
  replicas: 1
  image:
    repository: doc/pyincore-viz
    tag: 0.2.4
  service:
    type: ClusterIP
    port: 80

# ----------------------------------------------------------------------
# API DOCUMENTATION CONFIGURATION
# ----------------------------------------------------------------------
doc_api:
  replicas: 1
  image:
    repository: doc/api
    tag: 1.7.0
  service:
    type: ClusterIP
    port: 80

# ----------------------------------------------------------------------
# DATA SERVICE CONFIGURATION
# ----------------------------------------------------------------------
svc_data:
  replicas: 1
  repo: /home/incore/data/
  image:
    repository: data-jetty
    tag: 0.9.0
  service:
    type: ClusterIP
    port: 8888
  ingress:
    annotations:
#      ingress.kubernetes.io/auth-url: /auth/
#      ingress.kubernetes.io/auth-response-headers: x-auth-userinfo, X-Auth-Userinfo
#      traefik.ingress.kubernetes.io/rate-limit: |
#        extractorfunc: client.ip
#        rateset:
#          api-rateset:
#            period: 1s
#            average: 10
#            burst: 20


# ----------------------------------------------------------------------
# DFR3 SERVICE CONFIGURATION
# ----------------------------------------------------------------------
svc_dfr3:
  replicas: 1
  image:
    repository: dfr3-jetty
    tag: 0.9.0
  service:
    type: ClusterIP
    port: 8888
  ingress:
    annotations:
#      ingress.kubernetes.io/auth-url: /auth/
#      ingress.kubernetes.io/auth-response-headers: x-auth-userinfo, X-Auth-Userinfo
#      traefik.ingress.kubernetes.io/rate-limit: |
#        extractorfunc: client.ip
#        rateset:
#          api-rateset:
#            period: 1s
#            average: 10
#            burst: 20

# ----------------------------------------------------------------------
# HAZARD SERVICE CONFIGURATION
# ----------------------------------------------------------------------
svc_hazard:
  replicas: 1
  image:
    repository: hazard-jetty
    tag: 0.9.0
  service:
    type: ClusterIP
    port: 8888
  ingress:
    annotations:
#      ingress.kubernetes.io/auth-url: /auth/
#      ingress.kubernetes.io/auth-response-headers: x-auth-userinfo, X-Auth-Userinfo
#      traefik.ingress.kubernetes.io/rate-limit: |
#        extractorfunc: client.ip
#        rateset:
#          api-rateset:
#            period: 1s
#            average: 10
#            burst: 20

# ----------------------------------------------------------------------
# SPACE SERVICE CONFIGURATION
# ----------------------------------------------------------------------
svc_space:
  replicas: 1
  image:
    repository: space-jetty
    tag: 0.9.0
  service:
    type: ClusterIP
    port: 8888
  ingress:
    annotations:
#      ingress.kubernetes.io/auth-url: /auth/
#      ingress.kubernetes.io/auth-response-headers: x-auth-userinfo, X-Auth-Userinfo
#      traefik.ingress.kubernetes.io/rate-limit: |
#        extractorfunc: client.ip
#        rateset:
#          api-rateset:
#            period: 1s
#            average: 10
#            burst: 20

# ----------------------------------------------------------------------
# SEMANTICS SERVICE CONFIGURATION
# ----------------------------------------------------------------------
svc_sema:
  replicas: 1
  image:
    repository: semantics-jetty
    tag: 0.9.0
  service:
    type: ClusterIP
    port: 8888
  ingress:
    annotations:
#      ingress.kubernetes.io/auth-url: /auth/
#      ingress.kubernetes.io/auth-response-headers: x-auth-userinfo, X-Auth-Userinfo
#      traefik.ingress.kubernetes.io/rate-limit: |
#        extractorfunc: client.ip
#        rateset:
#          api-rateset:
#            period: 1s
#            average: 10
#            burst: 20


# ----------------------------------------------------------------------
# DEPENDENCIES CONFIGURATION
# ----------------------------------------------------------------------

# ----------------------------------------------------------------------
# GEOSERVER CONFIGURATION
# ----------------------------------------------------------------------
geoserver:
  enabled : true
  username: admin
  password: incorerocks
  workspace: incore
  url: http://incore-geoserver:8080/geoserver/
  replicas: 1
  image:
    repository: kartoza/geoserver
    tag: 2.17.2
  service:
    type: ClusterIP
    port: 8080
  persistence:
    #existingClaim:
    size: 2Ti

# ----------------------------------------------------------------------
# JUPYTERHUB
# ----------------------------------------------------------------------
jupyterhub:
  hub:
    image:
      name: hub.ncsa.illinois.edu/incore/jupyterhub
      tag: 0.5.0
      pullSecrets:
        name: regcred
    pdb:
      enabled: false
    baseUrl: /hub/
    extraEnv:
      JUPYTER_ENABLE_LAB: 1
      KEYCLOAK_AUDIENCE: INCORE
      KEYCLOAK_HOSTNAME: incore.example.com
      KEYCLOAK_REALM: In-core
    extraConfig:
      incoreConfig.py: |
        #c.KubeSpawner.cmd = ['jupyter-labhub']
        #c.Spawner.default_rul="/lab"
        c.KubeSpawner.cpu_limit= 4
        c.KubeSpanwer.cpu_guarantee = 2
        c.KubeSpanwer.mem_limit = 8
        c.KubeSpawner.mem_guarantee = 4
        from customauthenticator.custom import CustomTokenAuthenticator
        c.JupyterHub.authenticator_class = CustomTokenAuthenticator
        c.CustomTokenAuthenticator.keycloak_url = "https://%s/auth/realms/%s/" % (os.getenv('KEYCLOAK_HOSTNAME'), os.getenv('KEYCLOAK_REALM'))
        c.CustomTokenAuthenticator.auth_cookie_header= "Authorization"
        c.CustomTokenAuthenticator.auth_username_key= "preferred_username"
        c.CustomTokenAuthenticator.landing_page_login_url = "https://" + os.getenv('KEYCLOAK_HOSTNAME')
  singleuser:
    defaultUrl: "/lab"
    image:
      name: hub.ncsa.illinois.edu/incore/jupyterlab-incore
      tag: r.0.8.1-0.2.5
      pullSecrets:
        name: regcred
      command4: ["echo", "SUCCESS"]
    cpu:
      requests: 2
      limit: 4
    memory:
      requests: 4G
      limit: 16G
    #storage:
    #  type: dynamic
    #  capacity: 2Gi
    #  requests: 1Gi
    #  limit: 2Gi
    #  dynamic:
    #    storageClass: nfs-client
  proxy:
    pdb:
      enabled: false
  ingress:
    enabled: true
    hosts:
      - incore.example.com

# ----------------------------------------------------------------------
# MONGODB
# ----------------------------------------------------------------------
mongodb:
  architecture: standalone
  useStatefulSet: true
  auth:
    rootPassword: incorerocks
  replicaSetName: incore
  initdbScripts:

# ----------------------------------------------------------------------
# POSTGRESQL
# ----------------------------------------------------------------------
postgresql:
  postgresqlPassword: incorerocks
  initdbScripts:
    keycloak.sql: |
      CREATE DATABASE keycloak;
      CREATE USER keycloak WITH PASSWORD 'keycloak';
      GRANT ALL PRIVILEGES ON DATABASE keycloak TO keycloak;

# ----------------------------------------------------------------------
# KEYCLOAK
# ----------------------------------------------------------------------
keycloak:
  postgresql:
    enabled: false
  ingress:
    tls: []
    enabled: true
    servicePort: https
    hosts:
      - incore.example.com
    rules:
      - host: incore.example.com
        paths:
          - /auth/
  extraEnv: |
    - name: KEYCLOAK_USER
      value: keycloak
    - name: KEYCLOAK_PASSWORD
      value: keycloak
    - name: DB_VENDOR
      value: postgres
    - name: DB_ADDR
      value: incore-postgresql
    - name: DB_PORT
      value: "5432"
    - name: DB_DATABASE
      value: keycloak
    - name: DB_USER
      value: keycloak
    - name: DB_PASSWORD
      value: keycloak

# ----------------------------------------------------------------------
# LDAP CONFIGURATION
# ----------------------------------------------------------------------
# used to get groups the user belongs to to give access to spaces etc.
ldap:
  url: ldap.example.com
  userdn: "OU=People,OU=example,OU=com"
  admins: admin
  refresh: "900"
  viewall: vieall

#------------------------------------------------------------------------
# CORS
#------------------------------------------------------------------------
cors:
  origin: 'http://localhost:3000,http://localhost:5000'
