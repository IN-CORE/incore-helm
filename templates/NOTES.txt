1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ . }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "incore.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "incore.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "incore.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "incore.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:80
{{- end }}


Following versions have been deployed:

UI:
- frontend      : {{ .Values.frontend.image.tag }}
{{- range $key, $val := .Values.playbooks }}
{{- if or .enabled (not (hasKey . "enabled")) }}
- playbooks-{{ $key }}: {{ .image | quote }}
{{- end }}
{{- end }}

Documentation:
- Manual        : {{ .Values.doc_incore.image.tag }}
- API           : {{ .Values.doc_api.image.tag }}
- PyIncore      : {{ .Values.doc_pyincore.image.tag }}
- PyIncore Viz  : {{ .Values.doc_pyincore_viz.image.tag }}
- PyIncore Data : {{ .Values.doc_pyincore_data.image.tag }}

Services:
- Auth          : {{ .Values.auth.image.tag }}
- Data          : {{ .Values.svc_data.image.tag }}
- DFR3          : {{ .Values.svc_dfr3.image.tag }}
- Hazard        : {{ .Values.svc_hazard.image.tag }}
- Semantics     : {{ .Values.svc_sema.image.tag }}
- Space         : {{ .Values.svc_space.image.tag }}
- Plotting      : {{ .Values.svc_plotting.image.tag }}

Maestro Services:
- SLC           : {{ .Values.svc_maestro.slc.enabled }}
- Joplin        : {{ .Values.svc_maestro.joplin.enabled }}
- Galveston     : {{ .Values.svc_maestro.galveston.enabled }}

Playbooks:
- SLC           : {{ .Values.playbooks.slc.enabled }}
- Joplin        : {{ .Values.playbooks.joplin.enabled }}
- Galveston     : {{ .Values.playbooks.galveston.enabled }}

Jupyter:
- hub           : {{ .Values.jupyterhub.hub.image.tag }}
- lab           : {{ .Values.jupyterhub.singleuser.image.tag }}

Support:
{{- if .Values.datawolf.enabled }}
- DataWolf      : {{ .Values.datawolf.image.tag }}
{{- end }}
- Geoserver     : {{ .Values.geoserver.image.repository }}:{{ .Values.geoserver.image.tag }}
- Postgresql    : {{ .Values.postgresql.image.tag }}
- Keycloak      : {{ default .Values.keycloak.image.tag "unknown" }}
- MongoDB       : {{ .Values.mongodb.image.tag }}
